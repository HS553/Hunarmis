@model  Hunarmis.Models.AspNetUser
@using Hunarmis.Models
@*@model IEnumerable<KGBV_JH.Models.QesRes>*@
@{
    ViewBag.Title = "Dashboard";
    ViewBag.TitleIcon = "fa fa-area-chart";
    ViewBag.SemiTitle = "Dashboard";
    ViewBag.SemiTitleLink = "/";

}
<div id="page-content">
    <div class="genral-form">
        <div class="row">
            <div class="col-lg-12">
                <div class="panel">
                    <div class="panel-spacer">
                        <p class="bord-btm pad-ver text-main text-bold">
                            <i class="fa fa-list spacerright2"></i>@ViewBag.Title
                        </p>
                    </div>

                    <div class="panel-body">
                        <div class="col-sm-12" id="errormsg">

                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div id="chartbatch"></div>
                            </div>
                            <div class="col-sm-6">
                                <div id="chartcourse"></div>
                            </div>
                            <div class="col-sm-6">
                                <div id="chartqlf"></div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="panel-body">
                        <div class="row">
                           
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-3d.js"></script>
    <script src="https://code.highcharts.com/modules/cylinder.js"></script>
    <script src="https://code.highcharts.com/modules/funnel3d.js"></script>
    <script src="https://code.highcharts.com/modules/pyramid3d.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>

    <script>
        $(document).ready(function () {
            LoadReport();
        });
        function LoadReport() {
            $('#errormsg').html("");
            $('#global-loader').css('background', 'transparent').css('display', 'block');
            $('#errormsg').removeClass("text-danger");
            $.ajax({
                // url: url,
                url: document.baseURI + "/Home/GetIndex",
                type: "POST",
                data: '',
                // contentType: "application/json",
                success: function (resp) {
                    if (resp.IsSuccess) {
                        var resdata = JSON.parse(resp.Data);
                        $('#errormsg').addClass("text-black");
                        $('#global-loader').css('background', 'transparent').css('display', 'none');
                        var BatchData = [], CourseData = [], DisData = [],
                            QlfData = [], TrainCrData = [];
                        if (resdata) {
                            BatchData = resdata.filter(x => x.Type == "Batch");
                            CourseData = resdata.filter(x => x.Type == "Course");
                            DisData = resdata.filter(x => x.Type == "District");
                            QlfData = resdata.filter(x => x.Type == "Qualification");
                            TrainCrData = resdata.filter(x => x.Type == "TrainingCenter");
                            ChartBatch(BatchData);
                            ChartCourse(CourseData);
                            ChartQlf(QlfData);
                        }
                    }
                    else {
                        $('#errormsg').html(resp.Data); $('#errormsg').addClass("text-danger");
                        //CreateToasterMessage("Error", response.Message, response.StatusType);
                        $('#global-loader').css('background', 'transparent').css('display', 'none');
                    }
                },
                error: function (req, error) {
                    if (error === 'error') { error = req.statusText; }
                    var errormsg = 'There was a communication error: ' + error;
                    $('#errormsg').html(errormsg); $('#errormsg').addClass("text-danger");
                    $('#global-loader').css('background', 'transparent').css('display', 'none');
                }
            });
        }

        function ChartBatch(BatchData) {
            if (BatchData) {
                var objd = new Object();
                var Dlist = []; var name = []; var vl = [];
                for (var i = 0; i < BatchData.length; i++) {
                    var obj = [BatchData[i].ColumnName, BatchData[i].NoofData];
                    name.push(obj);
                }
                
                // Set up the chart
                Highcharts.chart('chartbatch', {
                    chart: {
                        type: 'pyramid3d',
                        options3d: {
                            enabled: true,
                            alpha: 10,
                            depth: 50,
                            viewDistance: 50
                        }
                    },
                    title: {
                        text: 'Batch Wise'
                    },
                    credits: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            dataLabels: {
                                enabled: true,
                                format: '<b>{point.name}</b> ({point.y:,.0f})',
                                allowOverlap: true,
                                x: 10,
                                y: -5
                            },
                            width: '60%',
                            height: '80%',
                            center: ['50%', '45%']
                        }
                    },
                    series: [{
                        name: 'Batch',
                        data: name
                    }]
                });
            }

        }
        function ChartCourse(Datalist) {
            var Dlist = []; var name = []; var vl = [];
            if (Datalist) {
                for (var i = 0; i < Datalist.length; i++) {
                    name.push([Datalist[i].ColumnName]);
                    vl.push([Datalist[i].NoofData]);
                }
            }
          
            Highcharts.chart('chartcourse', {
                chart: {
                    type: 'cylinder',
                    options3d: {
                        enabled: true,
                        alpha: 15,
                        beta: 15,
                        depth: 50,
                        viewDistance: 25
                    }
                },
                title: {
                    text: 'Course Wise'
                },
                //subtitle: {
                //    text: 'Source: ' +
                //        '<a href="https://www.fhi.no/en/id/infectious-diseases/coronavirus/daily-reports/daily-reports-COVID19/"' +
                //        'target="_blank">FHI</a>'
                //},
                xAxis: {
                    categories: name,
                    //    ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90+'],
                    title: {
                        text: 'Courses'
                    },
                    labels: {
                        skew3d: true
                    }
                },
                yAxis: {
                    title: {
                        margin: 20,
                        text: 'No of Course'
                    },
                    labels: {
                        skew3d: true
                    }
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    headerFormat: '<b>Course: {point.x}</b><br>'
                },
                plotOptions: {
                    series: {
                        depth: 25,
                        colorByPoint: true
                    }
                },
                series: [{
                    data: vl,
                    name: 'Course',
                    showInLegend: false
                }]
            });
        }
        function ChartQlf(Datalist) {
            if (Datalist) {
                var objd = new Object();
                var Dlist = []; var name = []; var vl = [];
                for (var i = 0; i < Datalist.length; i++) {
                    Dlist.push({ name: Datalist[i].ColumnName, y: Datalist[i].NoofData });
                }
            }

            Highcharts.setOptions({
                colors: Highcharts.map(Highcharts.getOptions().colors, function (color) {
                    return {
                        radialGradient: {
                            cx: 0.5,
                            cy: 0.3,
                            r: 0.7
                        },
                        stops: [
                            [0, color],
                            [1, Highcharts.color(color).brighten(-0.3).get('rgb')] // darken
                        ]
                    };
                })
            });

            // Build the chart
            Highcharts.chart('chartqlf', {
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie'
                },
                title: {
                    text: 'Qualification Wise',
                    align: 'center'
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                },
                accessibility: {
                    point: {
                        valueSuffix: '%'
                    }
                },
                credits: {
                    enabled: false
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<span style="font-size: 1.2em"><b>{point.name}</b></span><br>' +
                                '<span style="opacity: 0.6">{point.percentage:.1f} %</span>',
                            connectorColor: 'rgba(128,128,128,0.5)'
                        }
                    }
                },
                series: [{
                    name: 'Qualification',
                    data: Dlist
                }]
            });

        }
    </script>
}
